name    = Seq
author  = Thomas Wingo <thomas.wingo@emory.edu>
license = GPL_3
copyright_holder = Thomas Wingo
copyright_year   = 2015
version = 0.01

; just skip the c files in AutoPrereqs 
;[Encoding]
;encoding = bytes
;match    = \.c\z

; version provider
[RewriteVersion]

; collect contributor list
[Git::Contributors]

; choose files to include
[Git::GatherDir]

[PruneCruft]
[ManifestSkip]

; file modifications
[InsertCopyright]
[SurgicalPodWeaver]
:version = 0.0021
replacer = replace_with_comment
post_code_replacer = replace_with_nothing

; generated files
[License]
[Pod2Readme]

; t tests
[Test::ReportPrereqs]

; xt tests
[Test::MinimumVersion]
[Test::Version]
[Test::PodSpelling]
[Test::Perl::Critic]
[MetaTests]
[PodSyntaxTests]
[PodCoverageTests]

; metadata
[AutoPrereqs]
skip = \.c$

[MinimumPerl]   ; determine minimum perl version

[MetaProvides::Package]

[Prereqs::AuthorDeps]   ; add authordeps as develop/requires
[MetaYAML]              ; generate META.yml (v1.4)
[MetaJSON]              ; generate META.json (v2)
[CPANFile]              ; generate cpanfile

; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL
eumm_version = 6.17
default_jobs = 9

; manifest (after all generated files)
[Manifest]          ; create MANIFEST

; copy cpanfile back to repo dis
[CopyFilesFromBuild::Filtered]
copy = Makefile.PL

; before release
[PromptIfStale]     ; check if our build tools are out of date
check_all_plugins = 1

[Git::CheckFor::CorrectBranch] ; ensure on master branch

[Git::Check] ; ensure all files checked in
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = cpanfile

[RunExtraTests] ; ensure xt/ tests pass
default_jobs = 9

[TestRelease] ; ensure t/ tests pass
[ConfirmRelease] ; prompt before uploading

; releaser
; [UploadToCPAN]; uploads to CPAN

; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)
[Git::Tag] ; tag repo with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and*after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.It will still act during pre-release as usual
[NextRelease]
[BumpVersionAfterRelease]
[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
[Git::Push] ; push repo to remote
push_to = origin

